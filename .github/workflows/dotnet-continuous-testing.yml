# This workflow will build a .NET framework project(s)
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-net
# this build runs for every push where a change to src directory is included
name: 'CQ : Build and Test : Core Components'
on:
  push:
    branches:  
      - '**'            # matches every branch
      - '!main'         # excludes master
      - '!releases'     # excludes releases
    paths:
      - 'src/**'
env:
    FAILED_TEST_COUNT: "0"

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - name: Get current version number
      id: versionid
      run: echo "vrsn_number=3.1" >> "$GITHUB_OUTPUT"

    - uses: actions/checkout@v4
    - name: Get current date
      id: date
      run: echo "date=$(date +'%Y%m%d')" >> "$GITHUB_OUTPUT"
  
    - name: Set Release Version
      run: |
          echo "BUILD_VERSION=${{format('{0}.{1}', steps.versionid.outputs.vrsn_number, github.run_number)}}" >> $GITHUB_ENV

    - uses: browser-actions/setup-chrome@v1
    - run: chrome --version
      if: github.event_name != 'pull_request'
    
    - uses: browser-actions/setup-firefox@v1
    - run: firefox --version
      if: github.event_name != 'pull_request'
  
    - name: Restore Packages
      if: github.event_name != 'pull_request'
      timeout-minutes: 10
      shell: pwsh
      run: |
        & ./pipeline-restore-packages.ps1

    - name: Build solution
      timeout-minutes: 5
      shell: pwsh
      run: |
        & ./pipeline-build-solutions.ps1 -version "${{ env.BUILD_VERSION }}"

    - name: Test with dotnet
      uses: nick-fields/retry@v2
      with:
        timeout_minutes: 10
        max_attempts: 3
        shell: pwsh
        command: |
          & ./pipeline-test-solutions.ps1

    - name: Summarize Test Results
      shell: pwsh
      run: |
        & ./pipeline-summarize-tests.ps1 -workingDir "${{ github.workspace }}"

    - name: Upload dotnet test results
      uses: actions/upload-artifact@v3
      with:
        name: test-results
        path: ~/**/*.trx

    - name: Calculate Release Title
      shell: pwsh
      run: |
        & ./x-pipeline-desktop-release-title.ps1

    - name: Echo Release Title
      run: echo ${{ env.RELEASE_TITLE }}

    - name: Evaluate Test Failure Status
      if: env.FAILED_TEST_COUNT != '0'
      uses: actions/github-script@v3
      with:
        script: core.setFailed('Coverage test below tolerance')
