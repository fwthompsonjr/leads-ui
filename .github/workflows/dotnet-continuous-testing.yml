# This workflow will build a .NET framework project(s)
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-net
# this build runs for every push where a change to src directory is included
name: 'CQ : Build and Test : Core Components'
on:
  push:
    branches:  
      - '**'            # matches every branch
      - '!main'         # excludes master
      - '!releases'     # excludes releases
    paths:
      - 'src/core/**'
      - 'src/db/**'
      - 'src/logging/**'
      - '!src/api/**'
      - '!src/email/**'
env:
    FAILED_TEST_COUNT: "0"
    LEGALLEAD_INSTALLATION_KEY: ${{ secrets.LEGALLEAD_INSTALLATION_KEY }}
    LEGALLEAD_EMAIL_TOKEN: ${{ secrets.SES_SECRET }}
    LEGALLEAD_EMAIL_USER: ${{ secrets.SES_USER }}
    NUGET_CERT_REVOCATION_MODE: offline

jobs:
  build:

    runs-on: windows-latest

    steps:

    - uses: actions/checkout@v4
  
    - name: Set Release Version
      shell: bash
      run: |
          echo "BUILD_VERSION=${{format('{0}.{1}', '3.1', github.run_number)}}" >> $GITHUB_ENV

    - uses: browser-actions/setup-chrome@v1
    - run: chrome --version
      if: github.event_name != 'pull_request'
    
    - uses: browser-actions/setup-firefox@v1
    - run: firefox --version
      if: github.event_name != 'pull_request'
  
    - name: Restore Packages
      if: github.event_name != 'pull_request'
      timeout-minutes: 10
      shell: pwsh
      run: |
        & ./pipeline-restore-packages.ps1

    - name: Build solution
      timeout-minutes: 5
      shell: pwsh
      run: |
        & ./pipeline-build-solutions.ps1 -version "${{ env.BUILD_VERSION }}"

    - name: Test with dotnet
      uses: nick-fields/retry@v3
      with:
        timeout_minutes: 10
        max_attempts: 3
        shell: pwsh
        command: |
          & ./pipeline-test-solutions.ps1

    - name: Summarize Test Results
      shell: pwsh
      run: |
        & ./pipeline-summarize-tests.ps1 -workingDir "${{ github.workspace }}"

    - name: Calculate Release Title
      shell: pwsh
      run: |
        & ./x-pipeline-desktop-release-title.ps1

    - name: Echo Release Title
      run: echo ${{ env.RELEASE_TITLE }}
