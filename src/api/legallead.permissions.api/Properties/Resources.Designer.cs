//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace legallead.permissions.api.Properties {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "17.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("legallead.permissions.api.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///&lt;hr class=&quot;m-2 w-75&quot; /&gt;
        ///&lt;h5&gt;Admin&lt;/h5&gt;
        ///&lt;div&gt;
        ///    &lt;p class=&quot;lead&quot;&gt;
        ///        Administrator Account.
        ///    &lt;/p&gt;
        ///    &lt;ol&gt;
        ///        &lt;li&gt;Searches: There are no limits to the number of records returned from a search.&lt;/li&gt;
        ///        &lt;li&gt;Monthly Limit: There are no monthly limits applied to your account.&lt;/li&gt;
        ///        &lt;li&gt;Annual Limit: There are no annual limits.&lt;/li&gt;
        ///    &lt;/ol&gt;
        ///    &lt;p class=&quot;text-primary&quot;&gt;
        ///        Pricing: 
        ///    &lt;/p&gt;
        ///    &lt;ul&gt;
        ///        &lt;li&gt;The cost per lead is free.&lt;/li&gt;
        ///        &lt;li&gt;Admin ac [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string description_role_admin {
            get {
                return ResourceManager.GetString("description-role-admin", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///&lt;hr class=&quot;m-2 w-75&quot; /&gt;
        ///&lt;h5&gt;Gold&lt;/h5&gt;
        ///&lt;div&gt;
        ///    &lt;p class=&quot;lead&quot;&gt;
        ///        Gold Account. &lt;br/&gt;
        ///        With a Gold you have the following search restrictions.
        ///    &lt;/p&gt;
        ///    &lt;ol&gt;
        ///        &lt;li&gt;
        ///            Searches: 
        ///            The first 20 records returned from a search are billed at 4 cents per lead.
        ///            Additional records in the search are billed at 5 cents per lead.
        ///        &lt;/li&gt;
        ///        &lt;li&gt;
        ///            Monthly Limit: 
        ///            Your account is limited to receive 1500 leads in a c [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string description_role_gold {
            get {
                return ResourceManager.GetString("description-role-gold", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///&lt;hr class=&quot;m-2 w-75&quot; /&gt;
        ///&lt;h5&gt;Guest&lt;/h5&gt;
        ///&lt;div&gt;
        ///    &lt;p class=&quot;lead&quot;&gt;
        ///        Guest Account. &lt;br/&gt;
        ///        As a Guest you have the following search restrictions.
        ///    &lt;/p&gt;
        ///    &lt;ol&gt;
        ///        &lt;li&gt;Searches: A limit of 5 records can returned from any a search.&lt;/li&gt;
        ///        &lt;li&gt;Monthly Limit: A maximum of 15 records can be retrieved in a calendar month.&lt;/li&gt;
        ///        &lt;li&gt;Annual Limit: A maximum of 50 records can be retrieved in a calendar year.&lt;/li&gt;
        ///    &lt;/ol&gt;
        ///    &lt;p&gt;
        ///        Data restriction: 
        ///        A [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string description_role_guest {
            get {
                return ResourceManager.GetString("description-role-guest", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///&lt;hr class=&quot;m-2 w-75&quot; /&gt;
        ///&lt;h5&gt;Platinum&lt;/h5&gt;
        ///&lt;div&gt;
        ///    &lt;p class=&quot;lead&quot;&gt;
        ///        Platinum Account. 
        ///    &lt;/p&gt;
        ///    &lt;ol&gt;
        ///        &lt;li&gt;
        ///            Searches: 
        ///            The first 1000 records returned from a search are billed at 3 cents per lead.
        ///            Additional records in the search are billed at 5 cents per lead.
        ///        &lt;/li&gt;
        ///        &lt;li&gt;
        ///            Monthly Limit: 
        ///            Your account is limited to receive 10,000 leads in a calendar month.&lt;/li&gt;
        ///        &lt;li&gt;
        ///            Annual Limi [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string description_role_platinum {
            get {
                return ResourceManager.GetString("description-role-platinum", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///&lt;hr class=&quot;m-2 w-75&quot; /&gt;
        ///&lt;h5&gt;Silver&lt;/h5&gt;
        ///&lt;div&gt;
        ///    &lt;p class=&quot;lead&quot;&gt;
        ///        Silver Account. 
        ///    &lt;/p&gt;
        ///    &lt;ol&gt;
        ///        &lt;li&gt;
        ///            Searches: 
        ///            Records in the search are billed at 5 cents per lead.
        ///        &lt;/li&gt;
        ///        &lt;li&gt;
        ///            Monthly Limit: 
        ///            Your account is limited to receive 200 leads in a calendar month.&lt;/li&gt;
        ///        &lt;li&gt;
        ///            Annual Limit: 
        ///            Your account is limited to receive 1500 leads in a calendar year.&lt;/li&gt;
        ///    &lt;/ol&gt;
        ///    &lt;p cl [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string description_role_silver {
            get {
                return ResourceManager.GetString("description-role-silver", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;html&gt;&lt;head&gt;
        ///		&lt;script type=&quot;text/javascript&quot;&gt;
        ///            try { 
        ///            CefSharp.BindObjectAsync(&quot;jsHandler&quot;, &quot;jsHandler&quot;); 
        ///                } catch {} 
        ///            function changeViewHandler(viewName){
        ///		            const nn = &quot;d-none&quot;;
        ///		            const dvnav = &quot;div[name=&apos;navigation-alert-message&apos;]&quot;;
        ///		            if( $(dvnav).hasClass(nn) ) {
        ///			            $(dvnav).removeClass(nn);
        ///			            $(dvnav).hide();
        ///		            }
        ///		            let handler = window.jsHandler;
        ///		       [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string page_invoice_discount_html {
            get {
                return ResourceManager.GetString("page_invoice_discount_html", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;script name=&quot;checkout-stripe-js&quot;&gt;
        ///
        ///// This is your test publishable API key.
        ///const stripe = Stripe(&quot;&lt;!-- stripe public key --&gt;&quot;);
        ///
        ///// The items the customer wants to buy
        ///const items = [{ id: &quot;xl-tshirt&quot; }];
        ///
        ///let elements;
        ///
        ///initialize();
        ///checkStatus();
        ///
        ///document
        ///  .querySelector(&quot;#payment-form&quot;)
        ///  .addEventListener(&quot;submit&quot;, handleSubmit);
        ///
        ///function getClientSecret() {
        ///    const jsfmt = &apos;{ &quot;clientSecret&quot;: &quot;~0&quot;}&apos;;
        ///    let payload = jsfmt.replace(&quot;~0&quot;, &quot;&lt;!-- payment get intent index --&gt;&quot;);        /// [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string page_invoice_discount_js {
            get {
                return ResourceManager.GetString("page_invoice_discount_js", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;html&gt;&lt;head&gt;
        ///		&lt;script type=&quot;text/javascript&quot;&gt;
        ///            try { 
        ///            CefSharp.BindObjectAsync(&quot;jsHandler&quot;, &quot;jsHandler&quot;); 
        ///                } catch {} 
        ///            function changeViewHandler(viewName){
        ///		            const nn = &quot;d-none&quot;;
        ///		            const dvnav = &quot;div[name=&apos;navigation-alert-message&apos;]&quot;;
        ///		            if( $(dvnav).hasClass(nn) ) {
        ///			            $(dvnav).removeClass(nn);
        ///			            $(dvnav).hide();
        ///		            }
        ///		            let handler = window.jsHandler;
        ///		       [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string page_invoice_html {
            get {
                return ResourceManager.GetString("page_invoice_html", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;script name=&quot;checkout-stripe-js&quot;&gt;
        ///
        ///// This is your test publishable API key.
        ///const stripe = Stripe(&quot;&lt;!-- stripe public key --&gt;&quot;);
        ///
        ///// The items the customer wants to buy
        ///const items = [{ id: &quot;xl-tshirt&quot; }];
        ///
        ///let elements;
        ///
        ///initialize();
        ///checkStatus();
        ///
        ///document
        ///  .querySelector(&quot;#payment-form&quot;)
        ///  .addEventListener(&quot;submit&quot;, handleSubmit);
        ///
        ///// Fetches a payment intent and captures the client secret
        ///async function initialize() {
        ///  let obj = { id: &quot;&lt;!-- payment external id --&gt;&quot; }
        ///  const r [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string page_invoice_js {
            get {
                return ResourceManager.GetString("page_invoice_js", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;html&gt;&lt;head&gt;
        ///		&lt;script type=&quot;text/javascript&quot;&gt;
        ///            try { 
        ///            CefSharp.BindObjectAsync(&quot;jsHandler&quot;, &quot;jsHandler&quot;); 
        ///                } catch {} 
        ///            function changeViewHandler(viewName){
        ///		            const nn = &quot;d-none&quot;;
        ///		            const dvnav = &quot;div[name=&apos;navigation-alert-message&apos;]&quot;;
        ///		            if( $(dvnav).hasClass(nn) ) {
        ///			            $(dvnav).removeClass(nn);
        ///			            $(dvnav).hide();
        ///		            }
        ///		            let handler = window.jsHandler;
        ///		       [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string page_invoice_subscription_html {
            get {
                return ResourceManager.GetString("page_invoice_subscription_html", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;script name=&quot;checkout-stripe-js&quot;&gt;
        ///
        ///// This is your test publishable API key.
        ///const stripe = Stripe(&quot;&lt;!-- stripe public key --&gt;&quot;);
        ///
        ///// The items the customer wants to buy
        ///const items = [{ id: &quot;xl-tshirt&quot; }];
        ///
        ///let elements;
        ///
        ///initialize();
        ///checkStatus();
        ///
        ///document
        ///  .querySelector(&quot;#payment-form&quot;)
        ///  .addEventListener(&quot;submit&quot;, handleSubmit);
        ///
        ///function getClientSecret() {
        ///    const jsfmt = &apos;{ &quot;clientSecret&quot;: &quot;~0&quot;}&apos;;
        ///    let payload = jsfmt.replace(&quot;~0&quot;, &quot;&lt;!-- payment get intent index --&gt;&quot;);        /// [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string page_invoice_subscription_js {
            get {
                return ResourceManager.GetString("page_invoice_subscription_js", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;html&gt;
        ///	&lt;head&gt;
        ///		&lt;script type=&quot;text/javascript&quot;&gt;
        ///            try { 
        ///            CefSharp.BindObjectAsync(&quot;jsHandler&quot;, &quot;jsHandler&quot;); 
        ///                } catch {} 
        ///            function changeViewHandler(viewName){
        ///		            const nn = &quot;d-none&quot;;
        ///		            const dvnav = &quot;div[name=&apos;navigation-alert-message&apos;]&quot;;
        ///		            if( $(dvnav).hasClass(nn) ) {
        ///			            $(dvnav).removeClass(nn);
        ///			            $(dvnav).hide();
        ///		            }
        ///		            let handler = window.jsHandler;
        ///		    [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string page_level_request_completed {
            get {
                return ResourceManager.GetString("page_level_request_completed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;html&gt;
        ///	&lt;head&gt;
        ///		&lt;script type=&quot;text/javascript&quot;&gt;
        ///            try { 
        ///            CefSharp.BindObjectAsync(&quot;jsHandler&quot;, &quot;jsHandler&quot;); 
        ///                } catch {} 
        ///            function changeViewHandler(viewName){
        ///		            const nn = &quot;d-none&quot;;
        ///		            const dvnav = &quot;div[name=&apos;navigation-alert-message&apos;]&quot;;
        ///		            if( $(dvnav).hasClass(nn) ) {
        ///			            $(dvnav).removeClass(nn);
        ///			            $(dvnav).hide();
        ///		            }
        ///		            let handler = window.jsHandler;
        ///		    [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string page_payment_completed {
            get {
                return ResourceManager.GetString("page_payment_completed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;html&gt;
        ///	&lt;head&gt;
        ///		&lt;script type=&quot;text/javascript&quot;&gt;
        ///			try {
        ///				CefSharp.BindObjectAsync(&quot;jsHandler&quot;, &quot;jsHandler&quot;);
        ///			} catch {}		
        ///		&lt;/script&gt;
        ///		&lt;meta charset=&quot;utf-8&quot;&gt;
        ///		&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1, shrink-to-fit=no&quot;&gt;
        ///		&lt;meta name=&quot;description&quot; content=&quot;&quot;&gt;
        ///		&lt;meta name=&quot;author&quot; content=&quot;&quot;&gt;
        ///		&lt;title&gt;legallead.ui&lt;/title&gt;
        ///		&lt;!-- googleapis : fonts --&gt;
        ///		&lt;link href=&quot;https://fonts.googleapis.com/css2?family=Roboto:wght@300;400;500;700&amp;display=swap&quot; rel=&quot;styleshe [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string page_payment_detail_invalid {
            get {
                return ResourceManager.GetString("page_payment_detail_invalid", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to # leads-ui
        ///The ultimate lead sourcing application
        ///
        ///## Components   
        /// - legallead.jsdb : light-weight data store for application meta data
        /// - legallead.permission.api : api provider for user registration, authentication, permissions.
        /// </summary>
        internal static string README {
            get {
                return ResourceManager.GetString("README", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {
        ///  &quot;dropDowns&quot;: [
        ///    {
        ///      &quot;id&quot;: 0,
        ///      &quot;name&quot;: &quot;Search Type&quot;,
        ///      &quot;options&quot;: [
        ///        {
        ///          &quot;id&quot;: 0,
        ///          &quot;name&quot;: &quot;criminal case records&quot;
        ///        },
        ///        {
        ///          &quot;id&quot;: 1,
        ///          &quot;name&quot;: &quot;probate case records&quot;
        ///        },
        ///        {
        ///          &quot;id&quot;: 2,
        ///          &quot;name&quot;: &quot;magistrate case records&quot;
        ///        },
        ///        {
        ///          &quot;id&quot;: 3,
        ///          &quot;name&quot;: &quot;civil and family case records&quot;
        ///        },
        ///        {
        ///          &quot;id&quot;: 4,
        ///          &quot;name&quot;: &quot;justice of the  [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string tx_collin_drop_down {
            get {
                return ResourceManager.GetString("tx_collin_drop_down", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {
        ///  &quot;dropDowns&quot;: [
        ///    {
        ///      &quot;id&quot;: 0,
        ///      &quot;name&quot;: &quot;Court Selection&quot;,
        ///      &quot;options&quot;: [
        ///        {
        ///          &quot;id&quot;: 1,
        ///          &quot;name&quot;: &quot;All JP And County Courts&quot;
        ///        },
        ///        {
        ///          &quot;id&quot;: 2,
        ///          &quot;name&quot;: &quot;All JP Courts&quot;
        ///        },
        ///        {
        ///          &quot;id&quot;: 3,
        ///          &quot;name&quot;: &quot;Justice of the Peace Pct #1&quot;
        ///        },
        ///        {
        ///          &quot;id&quot;: 4,
        ///          &quot;name&quot;: &quot;Justice of the Peace Pct #2&quot;
        ///        },
        ///        {
        ///          &quot;id&quot;: 5,
        ///          &quot;name&quot;: &quot;Justice of th [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string tx_denton_drop_down {
            get {
                return ResourceManager.GetString("tx_denton_drop_down", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {
        ///  &quot;dropDowns&quot;: [
        ///    {
        ///      &quot;id&quot;: 0,
        ///      &quot;name&quot;: &quot;Search Type&quot;,
        ///      &quot;options&quot;: [
        ///        {
        ///          &quot;id&quot;: 0,
        ///          &quot;name&quot;: &quot;All Civil Courts&quot;
        ///        }
        ///      ]
        ///    }
        ///  ]
        ///}.
        /// </summary>
        internal static string tx_harris_drop_down {
            get {
                return ResourceManager.GetString("tx_harris_drop_down", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {
        ///  &quot;dropDowns&quot;: [
        ///    {
        ///      &quot;id&quot;: 0,
        ///      &quot;name&quot;: &quot;Search Type&quot;,
        ///      &quot;options&quot;: [
        ///        {
        ///          &quot;id&quot;: 0,
        ///          &quot;name&quot;: &quot;All Probate Courts&quot;
        ///        },
        ///        {
        ///          &quot;id&quot;: 1,
        ///          &quot;name&quot;: &quot;All JP Courts&quot;
        ///        },
        ///        {
        ///          &quot;id&quot;: 2,
        ///          &quot;name&quot;: &quot;All CCL Courts&quot;
        ///        },
        ///        {
        ///          &quot;id&quot;: 3,
        ///          &quot;name&quot;: &quot;JP No. 1&quot;
        ///        },
        ///        {
        ///          &quot;id&quot;: 4,
        ///          &quot;name&quot;: &quot;JP No. 2&quot;
        ///        },
        ///        {
        ///          &quot;id&quot;: 5,
        ///  [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string tx_tarrant_drop_down {
            get {
                return ResourceManager.GetString("tx_tarrant_drop_down", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Private Sub Workbook_Activate()
        ///Application.CutCopyMode = False
        ///Application.OnKey &quot;^c&quot;, &quot;&quot;
        ///Application.CellDragAndDrop = False
        ///End Sub
        ///
        ///Private Sub Workbook_Deactivate()
        ///Application.CellDragAndDrop = True
        ///Application.OnKey &quot;^c&quot;
        ///Application.CutCopyMode = False
        ///End Sub
        ///
        ///Private Sub Workbook_WindowActivate(ByVal Wn As Window)
        ///Application.CutCopyMode = False
        ///Application.OnKey &quot;^c&quot;, &quot;&quot;
        ///Application.CellDragAndDrop = False
        ///End Sub
        ///
        ///Private Sub Workbook_WindowDeactivate(ByVal Wn As Window)
        ///Applic [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string workbook_functions {
            get {
                return ResourceManager.GetString("workbook_functions", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Private Sub Worksheet_BeforeRightClick(ByVal Target As Range, Cancel As Boolean)
        ///    Cancel = True
        ///    MsgBox (&quot;Sorry Right Click is Disbaled for this Worksheet&quot;), _
        ///    vbInformation, &quot;Legal Lead Administration&quot;
        ///End Sub.
        /// </summary>
        internal static string worksheet_address_functions {
            get {
                return ResourceManager.GetString("worksheet_address_functions", resourceCulture);
            }
        }
    }
}
