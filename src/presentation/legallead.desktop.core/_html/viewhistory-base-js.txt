<script name="view-history-box-js">
let historypager = {
    "pagers": ["#cbo-subcontent-history-pager"],
    "history_row_select": "table[automationid='search-history-table'] tr[data-row-number]",
    "history_current_row": "table[automationid='search-history-table'] tr[data-row-number='~0']",
    "preview_name": "table[automationid='search-preview-table']",
    "preview_content": null,
    "set_page": function(cboId) {
        let indx = parseInt(cboId);
        if (isNaN(indx) || indx < 0 || indx > historypager.pagers.length) {
            return;
        }
        let keyname = historypager.pagers[indx];
        let pg = $(keyname).val();
        let rows = $(keyname).closest('table').find('tbody').find('tr[data-page-number]');
        let selectionMade = false;
        rows.each(function() {
            $current = $(this);
            attr = $current.attr("data-page-number");
            rwid = $current.attr("data-row-number");
            hscls = $current.attr("class");
            if (typeof hscls !== typeof undefined && hscls !== false) {
                $current.removeAttr('class');
            }
            if (attr == pg) {
                $current.show()
            } else {
                $current.hide();
            }
            if (!selectionMade && attr == pg) {
				historybox.fetch.item(rwid);
                selectionMade = true;
            }
        });
        $(keyname).blur();
    }
}

let historybox = {
    "isWorking": false,
    "controls": {
        "historylist": "dv-history-item-list",
        "preview": "dv-history-item-preview",
        "previewtemplate": "tarea-preview-html"
    },
    "getElementText": function (elementName) {
        try {
            let js = document.getElementById(elementName).innerText.trim();
            return js;
        } catch {
            return "";
        }
    },
    "preview": {
        "clear": function () {
            let html = historybox.getElementText(historybox.controls.previewtemplate);
            document.getElementById(historybox.controls.preview).innerHTML = html;
        }
    },
    "fetch": {
        "item": function (id) {
            try {
                const src = 'templates';
                const dest = 'dv-history-item-preview';
                const qrestriction = '#user-restriction-status';
                const dv = document.getElementById(src);
                const tbl = dv.getElementsByTagName("table")[0];
                const htm = tbl.outerHTML;
                // import template
                document.getElementById(dest).innerHTML = htm;
                
                // populate (please change layout of template item retaining span names)
                const rowselector = "tr[data-row-number='~0']".replace("~0", id);
                const src_items = [ 'a[title="View"]', "span[name='state-abbr']", "span[name='county-name']", "span[name='begin-date']", "span[name='ending-date']", "span[name='search-status']"];
                const dest_items = [ 'span[name="requested-date"]', "span[name='state-abbr']", "span[name='county-name']", "span[name='begin-date']", "span[name='ending-date']", "span[name='search-status']"]; 
                const $rwitm = $(rowselector); 
                const $destitm = $("#dv-history-item-preview > table:nth-child(1)");
                const uuindx = $rwitm.attr('search-uuid');
                const sts = $rwitm.find(src_items[src_items.length - 1]).attr('class');

                for(let s = 0; s < src_items.length; s++)
                { 
                    let txt = $rwitm.find( src_items[s] ).text().trim(); 
                    $destitm.find( dest_items[s] ).text( txt ); 
                }
                // re-write date as friendly
                const dateRequested = $destitm.find( dest_items[0] ).text().trim();
                const tmpDate = new Date(dateRequested);
                if (!isNaN(tmpDate)) {
                    const d1 = tmpDate.toDateString()
                    const t1 = tmpDate.toLocaleTimeString().split(' '); 
                    const t2 = t1[0].split(':'); 
                    const t3 = "".concat(t2[0], ':', t2[1], ' ', t1[1])
                    const d2 = "".concat(d1, ' ', t3);
                    $destitm.find( dest_items[0] ).text(d2);
                }
                $destitm.find("span[name='search-uuid']").text(uuindx);
                $destitm.find(dest_items[dest_items.length - 1]).attr('class', sts);
                // display error help text
                const stsname = $rwitm.find("span[name='search-status']").text().trim().toLowerCase();
                if (stsname == 'error') {
                    $("#tr-user-interaction-error").removeClass("d-none");
                }
                // check if user is restricted
                const isRestriction = $(qrestriction).val() != 'false' 
                if (isRestriction || stsname != 'completed') { return; }
                // reveal and enable buttons to purchase or preview
                $("#btn-user-interaction-purchase").removeAttr("disabled");
                $("#tr-user-interaction-completed").removeClass("d-none");
            } catch {
                historybox.preview.clear();
            }
        }
    }
}

let historylist_init = {
    "setScroll": function () {
        const selectedItem = "a[name='link-mail-items-template'].active";
        $(selectedItem).get(0).scrollIntoView();
    }
}

function fetch_item(id) {
    if (isNaN(id)) {
        return;
    }
    historybox.fetch.item(id);
}

function docReady(fn) {
    // see if DOM is already available
    if (document.readyState === "complete" || document.readyState === "interactive") {
        // call on next available tick
        setTimeout(fn, 1);
    } else {
        document.addEventListener("DOMContentLoaded", fn);
    }
}
docReady(function () {
    // historylist_init.setScroll();
});

</script>