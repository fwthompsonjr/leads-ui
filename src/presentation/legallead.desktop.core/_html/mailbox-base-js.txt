<script name="mail-box-js">

let mailbox = {
    "isWorking": false,
    "controls": {
        "template": "mail-item-template",
        "maillist": "dv-mail-item-list",
        "preview": "dv-mail-item-preview",
        "previewframe": "#dv-mail-item-preview-frame",
        "textarea": "tarea-json",
        "previewtemplate": "tarea-preview-html",
        "previewcurrent": "tarea-current-html",
        "nodata": "dv-mail-item-no-mail",
        "subheader": "mailbox-sub-header"
    },
    "clear": function () {
        let mbox = mailbox.controls.maillist;
        let element = document.getElementById(mbox);
        while (true) {
            if (element.children.length == 0) { break; }
            let itms = element.children.length - 1;
            let target = element.children[itms];
            element.removeChild(target);
        }
    },
    "createChild": function () {
        let mbox = mailbox.controls.maillist;
        let template = mailbox.controls.template;
        const clicktext = "javascript:fetch_item(~0)"
        const node = document.getElementById(template);
        const clone = node.cloneNode(true);
        let element = document.getElementById(mbox);
        let count = element.childElementCount;
        clone.removeAttribute("id");
        clone.setAttribute("data-item-index", "1");
        clone.setAttribute("href", clicktext.replace("~0", count));
        element.appendChild(clone);
    },
    "getElementText": function (elementName) {
        try {
            let js = document.getElementById(elementName).innerText.trim();
            return js;
        } catch {
            return "";
        }
    },
    "preview": {
        "clear": function () {
            let html = mailbox.getElementText(mailbox.controls.previewtemplate);
            document.getElementById(mailbox.controls.preview).innerHTML = html;
        },
        "populate": function () {
            let html = mailbox.getElementText(mailbox.controls.previewcurrent);
            if (html.length == 0) {
                mailbox.preview.clear();
                return;
            }
            document.getElementById(mailbox.controls.preview).innerHTML = html;
        }
    },
    "populate": function () {
        if (mailbox.isWorking) { return; }
        mailbox.isWorking = true;
        try {
            mailbox.clear();
            mailbox.preview.clear();
            let mbox = mailbox.controls.maillist;
            let js = mailbox.getElementText(mailbox.controls.textarea);
            let list = JSON.parse(js);
            for (const element of list) {
                mailbox.createChild();
                let target = document.getElementById(mbox).lastChild;
                mailbox.populateNode(target, element);
            }
            mailbox.onPopulationCompleted();

        } finally {
            mailbox.isWorking = false;
        }
    },
    "populateNode": function (target, obj) {
        let header = target.children[0];
        let detail = target.children[1];
        let subject = header.children[0];
        let createDt = header.children[1];
        let toaddress = detail.children[0];
        let fromaddress = detail.children[1];
        let indexId = detail.children[2];
        subject.innerText = obj["subject"];
        createDt.innerText = obj["createDate"];
        toaddress.innerText = "".concat("To: ", obj["toAddress"]);
        fromaddress.innerText = "".concat("From: ", obj["fromAddress"]);
        indexId.innerText = obj["id"];
    },
    "onPopulationCompleted": function () {
        const txt = "Correspondence";
        const mbox = document.getElementById(mailbox.controls.maillist);
        const count = mbox.childElementCount;
        const nodata = document.getElementById(mailbox.controls.nodata);
        const heading = document.getElementById(mailbox.controls.subheader);
        if (count == 0) {
            nodata.setAttribute("data-item-count", "0");
            heading.innerText = txt;
            return;
        }
        nodata.setAttribute("data-item-count", "1");
        heading.innerText = "".concat(txt, " ( ", count, " )");
    },
    "fetch": {
        "data": function () {
            let handler = window.jsHandler;
            if ( undefined === handler || null === handler || !(handler) ) { return; }
            if (mailbox.isWorking) { return; }
            mailbox.isWorking = true;
            try {
                handler.repopulate();
            }
            finally {
                mailbox.isWorking = false;
            }
        },
        "item": function (id) {
            try {
                // get html content based on item id
                if (isNaN(id)) { return; }
                // client side validation
                const inx = parseInt(id);
                const mbox = document.getElementById(mailbox.controls.maillist);
                const count = mbox.childElementCount - 1;
                if (inx < 0 || inx > count) return;
                mailbox.preview.clear();
                let handler = window.jsHandler;
                if ( undefined === handler || null === handler || !(handler) ) { return; }
                const mailitem = mbox.children[inx];
                const uuidx = mailitem.children[1].children[2].innerText;
                let isRead = handler.fetch(uuidx);
                if (null == isRead || isRead.length == 0) return;
                setTimeout(mailbox.preview.populate, 500);
            } 
            catch {
                mailbox.preview.clear();
            }
        }
    }
}

function fetch_item(id) {
    if (isNaN(id)) { return; }
    mailbox.fetch.item(id);
}

function appendMailCollection(collection) {
    let elementMail = document.getElementById(mailbox.controls.textarea);
    if (null != elementMail) {
        elementMail.innerText = collection;
        mailbox.populate();
    }
}

function appendMailItemDetail(content) {
    let elementMail = document.getElementById(mailbox.controls.previewcurrent);
    if (null != elementMail) {
        elementMail.innerText = content;
        mailbox.preview.populate();
    }
}
function clearContent() {
    mailbox.clear();
    mailbox.preview.clear();
}

function clearSelectedItem() {
    mailbox.preview.clear();
}

function viewSelectedItem() {
    mailbox.preview.populate();
}

function loadMailBox() {
    mailbox.populate();
}

mailbox.populate();

</script>